#!/usr/bin/python
# *- coding: utf-8 -*
# @author: Positive Compliance / Dante Bazaldua
# @brief: Shell for Cloud-processing application

import click
import os
import subprocess
import hashlib

CONFIG = {
    "DAEMON": False,
    "ENV": 'dev',
    "METHOD": 'radv1'
}


@click.group()
@click.option('--daemon', '-d', is_flag=True, default=True, help='Bandera para iniciarlo en \
modo daemon dentro del S.O.')
@click.option('--env', '-e', type=(unicode), default='dev', help='Env: prod/dev \
[default: dev]')
@click.option('--method', '-m', type=(unicode), default='radv1', help='radv1 \
(actualmente soportado)/ radv7 (multithread)')
def cli(daemon, env, method):
    """
    Utilidad para manejo de procesamiento y conexión con Nemesysco con
    distintas variables como son el ambiente (producción o desarrollo)
    para especificar cuando solo se probarán algunas funcionalidades y
    cuando se pondrá como servicio.
    """
    err = checkDefaults(daemon, env, method)
    for element in err:
        if element == 0:
            # Configuración para daemon
            CONFIG['DAEMON'] = True
        if element == 1:
            # Significa que hay que hacer llamadas a Nemesysco (normalmente)
            CONFIG['DAEMON'] = 'prod'
        if element == 2:
            # Cambiar de estandar de procesamiento
            print "No cuento con tal estándar de procesamiento."
            exit()


def checkDefaults(*params):
    # Daemon, enviorment,
    defaults = [True, 'dev', 'radv1']
    err = []
    for i in range(len(params)):
        if params[i] != defaults[i]:
            err.append(i)
    return err


@cli.command()
def start():
    """
    Inicia el procesamiento.
    """
    cliPresent()
    # os.system("pscloud")
    subprocess.Popen("python pscloud", shell=True)


@cli.command()
def latest():
    """
    Muestra lo último que hace el cloud.
    """
    os.system("tail -f ./log/$(ls ./log | sort -V | tail -n 1)")


@cli.command()
def watch():
    """
    Muestra lo último que hace el cloud.
    """
    os.system("less ./log/$(ls ./log | sort -V | tail -n 1)")


@cli.command()
def discover():
    """
    Muestra los PUID de cloud processing.
    """
    os.system("pgrep python")


@cli.command()
def kill():
    """
    Destruye los procesos de cloud.
    """
    click.confirm('¿En verdad quieres detenerlo?', abort=True)
    os.system("kill -9 $(pgrep python)")


@cli.command()
@click.option('--key', '-k', type=(unicode), help='Buscar \
archivo de procesamiento en carpeta tran y mostrarlo.', required=True)
def find(key):
    """
    Encuentra el archivo de procesamiento de una key dada (Transfer).
    """
    try:
        m = hashlib.md5()
        m.update(key)
        hashed = m.hexdigest()
        if os.path.isfile('./tran/' + hashed + '.txt'):
            print "¡Eureka!"
            print "File: %s.txt" % (hashed)
            print "----------------------------------------------------"
            with open('./tran/' + hashed + '.txt', 'r') as f:
                print f.read()
        else:
            print "Lo siento, no existe."
    except Exception as e:
        print str(e)


def cliPresent():
    click.secho('Positive Processing v1.0', bold=True)
    click.echo('Localidades importantes: \n\
System log = /log\n\
Individual Results = /trans\n')


if __name__ == '__main__':
    cli()
